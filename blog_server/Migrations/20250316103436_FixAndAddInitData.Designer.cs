// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using blog_server.Data;

#nullable disable

namespace blog_server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250316103436_FixAndAddInitData")]
    partial class FixAndAddInitData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("blog_server.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Administrator role",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "User role",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("blog_server.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96cb39f1-318f-4b17-97fb-c9bffe823a98"),
                            Email = "admin@example.com",
                            PasswordHash = "admin",
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("19542f2e-d222-4a24-a786-c2dc08ccfd87"),
                            Email = "user@example.com",
                            PasswordHash = "user",
                            Status = 1,
                            Username = "user"
                        });
                });

            modelBuilder.Entity("blog_server.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("96cb39f1-318f-4b17-97fb-c9bffe823a98"),
                            RoleId = 1,
                            JoinDate = new DateTime(2025, 3, 16, 10, 34, 35, 874, DateTimeKind.Utc).AddTicks(3580)
                        },
                        new
                        {
                            UserId = new Guid("19542f2e-d222-4a24-a786-c2dc08ccfd87"),
                            RoleId = 2,
                            JoinDate = new DateTime(2025, 3, 16, 10, 34, 35, 874, DateTimeKind.Utc).AddTicks(3580)
                        });
                });

            modelBuilder.Entity("blog_server.Models.UserRole", b =>
                {
                    b.HasOne("blog_server.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blog_server.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("blog_server.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("blog_server.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
