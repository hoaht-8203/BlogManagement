// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using blog_server.Data;

#nullable disable

namespace blog_server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250504001412_ChangeCreateByToString")]
    partial class ChangeCreateByToString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("blog_server.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("blog_server.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2025, 5, 4, 0, 14, 12, 822, DateTimeKind.Utc).AddTicks(2200),
                            Description = "Administrator role",
                            Name = "ADMIN",
                            UpdateDate = new DateTime(2025, 5, 4, 0, 14, 12, 822, DateTimeKind.Utc).AddTicks(2200)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2025, 5, 4, 0, 14, 12, 822, DateTimeKind.Utc).AddTicks(2200),
                            Description = "User role",
                            Name = "USER",
                            UpdateDate = new DateTime(2025, 5, 4, 0, 14, 12, 822, DateTimeKind.Utc).AddTicks(2200)
                        });
                });

            modelBuilder.Entity("blog_server.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("CreateBy")
                        .HasColumnType("text")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_verified");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96cb39f1-318f-4b17-97fb-c9bffe823a98"),
                            CreateDate = new DateTime(2025, 5, 4, 0, 14, 12, 822, DateTimeKind.Utc).AddTicks(2200),
                            Email = "admin@example.com",
                            IsEmailVerified = true,
                            PasswordHash = "J17F2TwefZ9YoBJxO+8xywNbSUYqN2TYQPyAP9+dF1DG6GwXd7a3py9PBChn3Nx9AzhPRcTy83poT54Bf69gYPqjXO8v4nuPSmeoBPMRmQo=",
                            Status = 1,
                            UpdateDate = new DateTime(2025, 5, 4, 0, 14, 12, 822, DateTimeKind.Utc).AddTicks(2200),
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("19542f2e-d222-4a24-a786-c2dc08ccfd87"),
                            CreateDate = new DateTime(2025, 5, 4, 0, 14, 12, 822, DateTimeKind.Utc).AddTicks(2200),
                            Email = "user@example.com",
                            IsEmailVerified = true,
                            PasswordHash = "n+5v26OcaAzEgsRJlyVog5jD9gSS/TkMEVTrZFU9SEMDK/4qCWOAOFlVtK9dTJmQAy0d326n+lOzD2dhwQgOubQbhZ8A9hxy5151G8Da5G0=",
                            Status = 1,
                            UpdateDate = new DateTime(2025, 5, 4, 0, 14, 12, 822, DateTimeKind.Utc).AddTicks(2200),
                            Username = "user"
                        });
                });

            modelBuilder.Entity("blog_server.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("join_date");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("96cb39f1-318f-4b17-97fb-c9bffe823a98"),
                            RoleId = 1,
                            JoinDate = new DateTime(2025, 5, 4, 0, 14, 12, 822, DateTimeKind.Utc).AddTicks(2200)
                        },
                        new
                        {
                            UserId = new Guid("19542f2e-d222-4a24-a786-c2dc08ccfd87"),
                            RoleId = 2,
                            JoinDate = new DateTime(2025, 5, 4, 0, 14, 12, 822, DateTimeKind.Utc).AddTicks(2200)
                        });
                });

            modelBuilder.Entity("blog_server.Models.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Browser")
                        .HasColumnType("text")
                        .HasColumnName("browser");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceType")
                        .HasColumnType("text")
                        .HasColumnName("device_type");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_time");

                    b.Property<string>("OS")
                        .HasColumnType("text")
                        .HasColumnName("os");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_tokens");
                });

            modelBuilder.Entity("blog_server.Models.Category", b =>
                {
                    b.HasOne("blog_server.Models.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("blog_server.Models.UserRole", b =>
                {
                    b.HasOne("blog_server.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blog_server.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("blog_server.Models.UserToken", b =>
                {
                    b.HasOne("blog_server.Models.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("blog_server.Models.Category", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("blog_server.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("blog_server.Models.User", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
